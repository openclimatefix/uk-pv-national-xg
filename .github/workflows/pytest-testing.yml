name: Python Tests
on:
  push:

jobs:
  run-python-tests:
    strategy:
      matrix:
        python-version: ["3.10"]
        os: ["ubuntu-latest"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Do some macOS specific installs for Python
        run: |
          brew install ${{inputs.brew_install}}
        if: matrix.os == 'macos-latest'
      - name: Do some Ubunutu specific installs for Python
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install libgeos++-dev libproj-dev proj-data proj-bin cmake git
      - name: Run extra commands
        run: |
          git clone --recursive https://github.com/dmlc/xgboost && cd xgboost && git checkout 603f8ce2fa71eecedadd837316dcac95ab7f4ff7 && mkdir build && cd build && cmake .. && make -j4 && cd .. && cd python-package && pip install . && cd .. && cd ..
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install git+https://github.com/SheffieldSolar/PV_Live-API#pvlive_api
          if [ -f "setup.py" ]; then pip install -e .; else export PYTHONPATH=$PYTHONPATH:./src; fi
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
      - name: Setup with pytest-xdist
        run: |
          # lets get the string for how many cpus to use with pytest
          echo "Will be using ${{ inputs.pytest_numcpus }} cpus for pytest testing"
          #
          # make PYTESTXDIST
          export PYTESTXDIST="-n 2"
          if [ 2 -gt 0 ]; then export PYTESTXDIST="$PYTESTXDIST --dist=loadfile"; fi
          #
          # echo results and save env var for other jobs
          echo "pytest-xdist options that will be used are: $PYTESTXDIST"
          echo "PYTESTXDIST=$PYTESTXDIST" >> $GITHUB_ENV
      - name: Setup with pytest-cov
        run: |
          # let make pytest run with coverage
          echo "Will be looking at coverage of dir  gradboost_pv"
          #
          # install pytest-cov
          pip install coverage==6.2 # https://github.com/nedbat/coveragepy/issues/1312
          pip install pytest-cov
          #
          # make PYTESTCOV
          export PYTESTCOV="--cov=gradboost_pv --cov-report=xml"
          #
          # echo results and save env var for other jobs
          echo "pytest-cov options that will be used are: $PYTESTCOV"
          echo "PYTESTCOV=$PYTESTCOV" >> $GITHUB_ENV
      - name: Run pytest
        run: |
          export PYTHONPATH=${PYTHONPATH}:""
          export PYTEST_COMMAND="pytest $PYTESTCOV $PYTESTXDIST -s"
          echo "Will be running this command: $PYTEST_COMMAND"
          cd uk-national-pv-xg && python -m pytest --cov=gradboost_pv --cov-report=xml -n 2 --dist=loadfile -s
          eval $PYTEST_COMMAND
      - name: Show coverage
        run: coverage report -m
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: false
